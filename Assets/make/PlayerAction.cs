//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/make/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""84d01494-01fa-46d7-bc5d-c8d6fcd70692"",
            ""actions"": [
                {
                    ""name"": ""mouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1d6762fa-f8d9-4ebe-aff0-d6645ffa9425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c631dcae-3309-425a-b794-6eeee2421cd2"",
                    ""path"": ""<Mouse>/LeftButton"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""mouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""7feb183d-6b2d-43e9-acd6-05e19f10ccb1"",
            ""actions"": [
                {
                    ""name"": ""touchscreen"",
                    ""type"": ""Button"",
                    ""id"": ""c66bebf3-6840-4c7d-a05b-2e6f2477bb47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a108a6da-998d-46f9-8574-43e3f49c59e2"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold,Tap"",
                    ""processors"": """",
                    ""groups"": ""Moblie"",
                    ""action"": ""touchscreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Moblie"",
            ""bindingGroup"": ""Moblie"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_mouseClick = m_Mouse.FindAction("mouseClick", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_touchscreen = m_Touch.FindAction("touchscreen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_mouseClick;
    public struct MouseActions
    {
        private @PlayerAction m_Wrapper;
        public MouseActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @mouseClick => m_Wrapper.m_Mouse_mouseClick;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @mouseClick.started += instance.OnMouseClick;
            @mouseClick.performed += instance.OnMouseClick;
            @mouseClick.canceled += instance.OnMouseClick;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @mouseClick.started -= instance.OnMouseClick;
            @mouseClick.performed -= instance.OnMouseClick;
            @mouseClick.canceled -= instance.OnMouseClick;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_touchscreen;
    public struct TouchActions
    {
        private @PlayerAction m_Wrapper;
        public TouchActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @touchscreen => m_Wrapper.m_Touch_touchscreen;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @touchscreen.started += instance.OnTouchscreen;
            @touchscreen.performed += instance.OnTouchscreen;
            @touchscreen.canceled += instance.OnTouchscreen;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @touchscreen.started -= instance.OnTouchscreen;
            @touchscreen.performed -= instance.OnTouchscreen;
            @touchscreen.canceled -= instance.OnTouchscreen;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_MoblieSchemeIndex = -1;
    public InputControlScheme MoblieScheme
    {
        get
        {
            if (m_MoblieSchemeIndex == -1) m_MoblieSchemeIndex = asset.FindControlSchemeIndex("Moblie");
            return asset.controlSchemes[m_MoblieSchemeIndex];
        }
    }
    public interface IMouseActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnTouchscreen(InputAction.CallbackContext context);
    }
}
